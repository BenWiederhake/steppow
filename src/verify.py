#!/usr/bin/env python3

from hashlib import sha256
from math import ceil, log2
from struct import Struct

TEST_CERTS = [
    # Basic sanity checks
    (b'\x00' * 32, b'\x00' * 8, 7, 7, 800,
     b'0xFF' * 10, -1, False),
    (b'\x00' * 32, b'\x00' * 8, 7, 7, 800,
     b'0xFF' * 1400, -1, False),
    # First actual certificate
    (b'\x00' * 32, b'\x00' * 8, 7, 7, 33,
     b'\x04\x64\x02\xA0\x13\x80\x47\x03\xF4\x04\x60\x1A\x01\x33\x0C\xAC\x04\x00\x12\x40\x4E\x01\x6C\x0B\x90\x52\x40\x85\x02\x1C\x0C\x20\x35\x01\x3A\x05\xF4\x0A\x90\x3A\x00\x9E\x00\xE0\x14\xA0\x24\x40\xEB\x01\xE4\x0B\xA0\x38\x80\x68\x06\x2C', 6596, True),
    (b'\x00' * 32, b'x' * 8, 7, 7, 33,
     b'\x04\x64\x02\xA0\x13\x80\x47\x03\xF4\x04\x60\x1A\x01\x33\x0C\xAC\x04\x00\x12\x40\x4E\x01\x6C\x0B\x90\x52\x40\x85\x02\x1C\x0C\x20\x35\x01\x3A\x05\xF4\x0A\x90\x3A\x00\x9E\x00\xE0\x14\xA0\x24\x40\xEB\x01\xE4\x0B\xA0\x38\x80\x68\x06\x2C', -1, False),
    (b'\x00' * 32, b'\x00' * 8, 7, 7, 33,
     b'\x04\x64\x02\xA0\x13\x80\x47\x03\xF4\x04\x60\x1A\x01\x33\x0C\xAC\x04\x00\x12\x40\x4E\x01\x6C\x0B\x90\x52\x41\x85\x02\x1C\x0C\x20\x35\x01\x3A\x05\xF4\x0A\x90\x3A\x00\x9E\x00\xE0\x14\xA0\x24\x40\xEB\x01\xE4\x0B\xA0\x38\x80\x68\x06\x2C', -1, False),
    # First "hard" certificate
    (b'\x00' * 32, b'Hello,  ', 7, 7, 800,
     b'\x03\x10\x0C\x30\x0E\x80\x56\x00\xBC\x08\x50\x29\x80\x4E\x03\x40\x06\x10\x73\x80\xD0\x02\x04\x03\x80\x1A\x82\x0F\x03\x68\x0C\x90\x40\x40\x7A\x00\xAC\x16\xC0\x29\x00\xB5\x07\xAC\x0B\xA0\x1B\x01\x39\x07\x68\x03\x70\x35\x80\x63\x03\x30\x05\x50\x0F\x80\x41\x0A\x04\x19\x70\x34\x41\x2F\x01\x00\x10\x20\x78\x80\xC1\x03\x20\x06\xC0\x33\xC0\x38\x05\x4C\x09\x50\x31\x00\x38\x04\xE8\x03\xD0\x47\xC0\x72\x00\xD0\x0E\x00\x3E\x40\x3B\x00\xB4\x0C\x00\x20\xC0\xF3\x05\x20\x03\xF0\x1B\x40\x37\x02\x70\x05\x70\x12\xC0\x41\x03\x4C\x09\x90\x24\x80\x4D\x02\x1C\x10\xA0\x0B\x80\x3D\x04\xE4\x0C\x50\x14\x40\xBA\x00\xC0\x03\xC0\x1A\x01\x5C\x00\xD0\x04\x80\x0B\x00\x54\x02\xF8\x19\x50\x46\x00\x62\x01\xFC\x04\xB0\x16\x00\x77\x02\xC8\x03\xE0\x1A\x80\x8F\x00\xBC\x0F\xC0\x2A\x40\xA9\x00\xF0\x03\x20\x0D\x00\x47\x01\x74\x03\x40\x3E\x80\xBE\x06\x7C\x09\x20\x15\x01\x18\x00\xD8\x05\x40\x10\x00\x6B\x01\x58\x04\xC0\x0C\x00\x2B\x01\x20\x05\x70\x19\xC2\x0E\x02\x48\x0D\x80\x14\x40\x2D\x06\x20\x06\x80\xB9\xC1\x31\x02\x1C\x09\x60\x23\x80\xB8\x02\x70\x15\x30\x0C\x00\xF9\x05\x40\x07\x50\x10\x81\xFB\x01\xAC\x0D\xC0\x59\x80\x82\x01\xA0\x07\x60\x1C\x81\x24\x02\x6C\x13\x80\x49\x00\x5B\x01\xB0\x08\x50\x21\x01\x41\x01\x90\x0C\xA0\x16\xC1\x4A\x06\xB0\x04\xC0\x2D\x80\x91\x01\x28\x07\x80\x16\x00\xF5\x00\xC4\x04\x80\x1D\x80\x4E\x03\x98\x03\xA0\x31\x40\x38\x02\x00\x03\x00\x12\x40\x58\x07\x84\x0C\x70\x0A\xC0\xCC\x01\xC8\x16\x40\x23\xC0\xE7\x05\x0C\x08\x60\x31\x80\x2E\x02\xA8\x02\xB0\x19\x40\x95\x00\xDC\x03\x90\x54\x40\x48\x01\x9C\x02\xD0\x10\x00\x48\x06\x48\x07\x80\x2E\x41\x7E\x03\x08\x09\x50\x26\x41\x05\x01\xCC\x04\xB0\x14\x80\xAF\x01\x44\x03\xB0\x29\x01\x86\x00\xD4\x07\x10\x29\xC1\x30\x03\xC8\x03\xD0\x0C\x40\xCA\x01\xCC\x17\x50\x0F\x00\xAC\x01\x20\x04\xA0\x0A\x80\xAA\x04\x00\x06\x70\x1C\xC0\x46\x00\xDC\x02\xB0\x32\x00\x9D\x01\x54\x07\x50\x27\x80\x33\x00\xD0\x07\xC0\x1A\xC0\x88\x00\xC8\x14\x00\x21\x80\xD2\x01\xA8\x0A\x90\x35\x81\x13\x04\x04\x09\x80\x6B\x00\x47\x03\xCC\x09\x40\x2C\x00\x83\x03\x70\x09\x40\x13\x40\x80\x04\x94\x05\x60\x36\x00\x66\x05\x6C\x11\x70\x29\x00\xA3\x01\x14\x1F\x70\x14\x80\x33\x01\x24\x0D\x70\x1E\x00\x90\x01\x44\x12\x60\x6C\x81\x02\x01\xB0\x12\xB0\x42\x42\x7C\x02\x78\x06\x00\x57\x81\x14\x01\x5C\x0B\x90\x41\x41\x0F\x00\xD0\x0A\xB0\x1A\x40\x62\x03\x5C\x03\x30\x39\x80\xC2\x02\xDC\x07\x70\x0E\x00\x3A\x01\xEC\x12\x10\x15\x00\x9E\x05\xE4\x15\x60\x22\xC3\xFE\x03\x28\x2B\xE0\x20\x81\x3E\x01\xD8\x13\x30\x0F\x81\x20\x06\x68\x08\x80\x3B\x40\xE6\x06\xC4\x04\x20\x38\x80\x32\x02\xD4\x0E\xC0\x41\x01\x6C\x01\xBC\x04\xF0\x62\x80\x6A\x01\x78\x10\xB0\x0D\xC0\xFF\x03\xC4\x03\x80\x47\x80\x4C\x02\x00\x13\xC0\x73\xC0\x62\x00\xF0\x02\xB0\x2C\x80\x38\x05\x60\x03\x20\x54\x00\x4C\x00\xC4\x04\xB0\x0B\x01\xB9\x05\x8C\x03\xD0\x10\x41\x30\x01\xA8\x09\xF0\x52\x40\x76\x02\x98\x05\xE0\x1C\x00\x79\x01\xD8\x19\xF0\x0E\xC1\x23\x01\x50\x03\xB0\x25\xC0\xE4\x02\x18\x04\x60\x0B\x40\x49\x02\x14\x0C\x20\x19\xC0\x5E\x03\xA0\x1B\xC0\x32\x81\x67\x03\xB8\x04\x10\x11\xC0\x78\x01\x3C\x1B\x10\x46\x41\x70\x02\x30\x0E\xC0\x0E\x00\xAF\x03\xA4\x0A\x30\x55\x40\x33\x01\x0C\x0D\x70\x15\x40\x7F\x03\xA0\x1C\x10\x24\xC0\x78\x00\xA8\x06\x00\x14\x40\x49\x03\xD8\x02\xD0\x15\x40\x56\x00\xA8\x08\x70\x15\x00\x3F\x00\xE0\x1E\xD0\x1B\xC0\x84\x01\x38\x13\x20\x48\x00\xBC\x01\x7C\x0F\xE0\x3C\x00\x6E\x02\xBC\x07\x70\x12\x00\x3D\x01\xA4\x08\x00\x16\x80\x4D\x01\xC0\x04\x20\x3E\x41\x7A\x01\x74\x0D\x70\x0B\xC0\x42\x00\xDC\x04\x60\x1F\x40\x9E\x05\x1C\x0D\x80\x47\x81\xC5\x01\x18\x08\x20\x4E\x80\xA9\x02\xC8\x03\x40\x10\x00\x76\x01\xFC\x08\x40\x0E\x01\x9B\x01\x6C\x06\xB0\x0E\x42\x72\x06\xF8\x04\x40\x47\xC0\x72\x05\x84\x09\xC0\x0B\x80\x77\x00\xC0\x06\xE0\x17\x80\x36\x04\xD4\x0B\x20\x22\x40\x6E\x01\x04\x06\x50\x2E\x81\xCE\x01\xA0\x03\x40\x0D\x80\xBC\x00\xB0\x03\x60\x0F\x40\xE9\x09\x7C\x0C\x40\x37\xC0\x36\x07\x50\x05\xF0\x2B\x81\x73\x07\x30\x0D\x00\x39\x00\xD7\x01\xE8\x0A\x60\x23\xC2\x0C\x07\xBC\x17\xC0\x0C\xC0\x60\x06\x90\x0A\x20\x2B\x40\x74\x02\xE8\x0D\xF0\x14\x00\xF6\x02\x08\x05\x30\x13\x00\x31\x01\x0C\x09\xD0\x28\xC0\xA3\x02\xE8\x10\xD0\x0D\x80\xB0\x08\x98\x22\x00\x54\x00\xA6\x03\x5C\x11\x10\x59\xC0\x36\x01\x68\x05\xA0\x1B\x40\xBF\x02\xEC\x0F\x90\x18\xC0\x45\x06\xA8\x02\xC0\x10\x81\xD8\x01\xB8\x04\x00\x25\xC0\x2C\x02\xD8\x0C\x20\x1B\x00\x41\x01\xD8\x1D\xE0\x1E\x80\x52\x02\x04\x05\x00\x0E\xC0\x9D\x01\x0C\x0A\x50\x1A\x00\x66\x01\x10\x16\xA0\x21\xC0\x58\x04\xC0\x0B\x90\x0F\x80\x75\x04\xA8\x09\xA0\x23\x80\x44\x01\x80\x11\x70\x77\x40\x6D\x05\xF8\x02\xF0\x2D\x81\x4B\x00\xAC\x05\xB0\x1C\x40\x53\x03\x04\x02\xC0\x38\x00\xB5\x02\x68\x04\xE0\x2C\x80\x3B\x02\x10\x04\xF0\x4E\xC0\x6B\x01\xF4\x12\x90\x12\xC0\x96\x01\xB0\x07\x30\x28\x00\x68\x01\xA0\x0C\x60\x12\x40\x7F\x02\x50\x13\x80\x31\xC0\x4D\x03\x70\x0D\xC0\x1A\x00\x55\x04\xA0\x05\x30\x42\x01\x06\x01\xEC\x05\x70\x16\x40\x98\x02\x88\x04\x30\x1E\x41\x33\x01\x64\x0E\xB0\x0C\x40\x99\x01\x0C\x03\xC0\x17\x80\x2A\x01\xD4\x11\xF0\x21\x00\x31\x02\xD8\x09\xD0\x26\x80\x68\x02\x3C\x03\x00\x15\x40\xB1\x03\x50\x07\xF0\x0E\x40\x2C\x01\x38\x14\xC0\x2D\x00\x7C\x01\x0C\x05\xC0\x0D\xC0\xC4\x00\xBC\x05\x70\x35\x41\x67\x00\xBC\x07\x80\x0B\x00\x86\x03\x38\x05\x40\x4C\x00\x2C\x02\xE4\x0D\xF0\x39\xC1\x5A\x05\x58\x0A\x30\x16\x80\x4E\x03\x30\x0B\x10\x33\x40\x50\x04\x10\x0A\xC0\x15\x80\x52\x0A\x20\x08\x60\x12\x00\x3A\x01\x20\x2C\xD0\x15\x00\x73\x01\xC4\x13\x10\x2D\x80\xAD\x06\x6C\x07\xD0\x6F\xC0\x55\x02\x04\x05\x90\x0F\x40\xBB\x01\x00\x0C\x00\x13\x40\x58\x01\x70\x03\x40\x21\x00\x8E\x02\x0C\x06\x30\x53\xC0\xA8\x00\xDC\x0C\xE0\x49\x42\x76\x01\x80\x13\x50\x1F\x81\x33\x01\xF8\x13\xC0\x16\xC1\xAF\x03\x60\x04\x00\x0F\x00\x4E\x02\x74\x02\xA0\x0F\x40\x70\x03\xC8\x11\x90\x2C\xC0\xDB\x01\xB8\x0E\xF0\x0C\xC0\x35', 138697, True),
    # Another "hard" certificate
    (b'\x00' * 32, b'World!!!', 12, 7, 122,
     b'\x02\xFF\x00\x0C\x90\x0F\xBC\x81\xD0\x10\x2F\x0A\x01\x87\x40\x13\x60\x00\x88\x01\x36\x40\x1A\x94\x0C\xB3\x80\x42\x90\x00\x82\x08\x53\x80\x0E\x68\x03\xE6\x03\xA6\x60\x27\x4C\x01\x39\x01\xDC\xF0\x1B\x7A\x00\x35\x40\x2D\xD8\x0B\xD5\x03\xC3\xA0\x17\x20\x03\x6C\x01\x8C\x70\x36\x5A\x00\x8F\x80\x58\x78\x0C\xE9\x02\x4A\x00\x8C\xB0\x11\x28\x80\x7C\x50\x32\xE0\x04\xFC\x80\x74\x58\x1C\x43\x00\x89\x40\x2E\xE8\x05\x9F\x00\x62\x00\x23\x9E\x01\xD5\x80\xDD\x38\x2E\x40\x04\xA8\x80\x19\x90\x06\x65\x00\x88\xB0\x51\xAA\x00\x67\xC0\xAF\x68\x01\x26\x03\xA6\x60\x0C\x90\x01\x64\x00\x36\x00\x00\xD0\x00\x45\xC1\x0D\xB8\x19\x7E\x00\x66\xE0\x4D\xC8\x0B\x13\x81\x2C\xA0\x3E\x20\x00\xF3\x00\x41\x40\x21\x44\x03\x09\xE0\x41\xE0\x02\x43\x81\x19\xA0\x0A\xFE\x01\xB4\xC0\x50\xE0\x11\x0D\x01\xC3\xA0\x01\xCC\x14\xCD\x01\xF2\xA0\x67\x40\x00\xA7\x40\x7E\x98\x02\xC0\x01\xF9\x20\x2F\x48\x08\xA7\x00\xCA\x70\x0C\xAA\x00\x5B\x01\xB1\x10\x06\x84\x03\x8E\xC0\x87\x0C\x1F\xF4\x81\x07\x10\x10\x02\x02\xBC\x80\x0C\x80\x16\x87\x08\xD7\x60\x40\x38\x00\xB8\x80\x2A\xB0\x03\x94\x08\x03\x40\x0B\x38\x17\xC1\x02\xBC\x40\x25\xF8\x02\x2A\x80\x20\x20\x15\x4A\x00\x0D\x80\x17\xC0\x08\x96\x05\x6F\xE0\x30\x54', 500635, True),
    (b'\x00' * 32, b'World!!?', 12, 7, 122, b'\x02\xFF\x00\x0C\x90\x0F\xBC\x81\xD0\x10\x2F\x0A\x01\x87\x40\x13\x60\x00\x88\x01\x36\x40\x1A\x94\x0C\xB3\x80\x42\x90\x00\x82\x08\x53\x80\x0E\x68\x03\xE6\x03\xA6\x60\x27\x4C\x01\x39\x01\xDC\xF0\x1B\x7A\x00\x35\x40\x2D\xD8\x0B\xD5\x03\xC3\xA0\x17\x20\x03\x6C\x01\x8C\x70\x36\x5A\x00\x8F\x80\x58\x78\x0C\xE9\x02\x4A\x00\x8C\xB0\x11\x28\x80\x7C\x50\x32\xE0\x04\xFC\x80\x74\x58\x1C\x43\x00\x89\x40\x2E\xE8\x05\x9F\x00\x62\x00\x23\x9E\x01\xD5\x80\xDD\x38\x2E\x40\x04\xA8\x80\x19\x90\x06\x65\x00\x88\xB0\x51\xAA\x00\x67\xC0\xAF\x68\x01\x26\x03\xA6\x60\x0C\x90\x01\x64\x00\x36\x00\x00\xD0\x00\x45\xC1\x0D\xB8\x19\x7E\x00\x66\xE0\x4D\xC8\x0B\x13\x81\x2C\xA0\x3E\x20\x00\xF3\x00\x41\x40\x21\x44\x03\x09\xE0\x41\xE0\x02\x43\x81\x19\xA0\x0A\xFE\x01\xB4\xC0\x50\xE0\x11\x0D\x01\xC3\xA0\x01\xCC\x14\xCD\x01\xF2\xA0\x67\x40\x00\xA7\x40\x7E\x98\x02\xC0\x01\xF9\x20\x2F\x48\x08\xA7\x00\xCA\x70\x0C\xAA\x00\x5B\x01\xB1\x10\x06\x84\x03\x8E\xC0\x87\x0C\x1F\xF4\x81\x07\x10\x10\x02\x02\xBC\x80\x0C\x80\x16\x87\x08\xD7\x60\x40\x38\x00\xB8\x80\x2A\xB0\x03\x94\x08\x03\x40\x0B\x38\x17\xC1\x02\xBC\x40\x25\xF8\x02\x2A\x80\x20\x20\x15\x4A\x00\x0D\x80\x17\xC0\x08\x96\x05\x6F\xE0\x30\x54', 500635, False),
    # This is the "12,7" certificate!
    (b'\x00' * 32, b'World!!!', 11, 8, 122,
     b'\x02\xFF\x00\x0C\x90\x0F\xBC\x81\xD0\x10\x2F\x0A\x01\x87\x40\x13\x60\x00\x88\x01\x36\x40\x1A\x94\x0C\xB3\x80\x42\x90\x00\x82\x08\x53\x80\x0E\x68\x03\xE6\x03\xA6\x60\x27\x4C\x01\x39\x01\xDC\xF0\x1B\x7A\x00\x35\x40\x2D\xD8\x0B\xD5\x03\xC3\xA0\x17\x20\x03\x6C\x01\x8C\x70\x36\x5A\x00\x8F\x80\x58\x78\x0C\xE9\x02\x4A\x00\x8C\xB0\x11\x28\x80\x7C\x50\x32\xE0\x04\xFC\x80\x74\x58\x1C\x43\x00\x89\x40\x2E\xE8\x05\x9F\x00\x62\x00\x23\x9E\x01\xD5\x80\xDD\x38\x2E\x40\x04\xA8\x80\x19\x90\x06\x65\x00\x88\xB0\x51\xAA\x00\x67\xC0\xAF\x68\x01\x26\x03\xA6\x60\x0C\x90\x01\x64\x00\x36\x00\x00\xD0\x00\x45\xC1\x0D\xB8\x19\x7E\x00\x66\xE0\x4D\xC8\x0B\x13\x81\x2C\xA0\x3E\x20\x00\xF3\x00\x41\x40\x21\x44\x03\x09\xE0\x41\xE0\x02\x43\x81\x19\xA0\x0A\xFE\x01\xB4\xC0\x50\xE0\x11\x0D\x01\xC3\xA0\x01\xCC\x14\xCD\x01\xF2\xA0\x67\x40\x00\xA7\x40\x7E\x98\x02\xC0\x01\xF9\x20\x2F\x48\x08\xA7\x00\xCA\x70\x0C\xAA\x00\x5B\x01\xB1\x10\x06\x84\x03\x8E\xC0\x87\x0C\x1F\xF4\x81\x07\x10\x10\x02\x02\xBC\x80\x0C\x80\x16\x87\x08\xD7\x60\x40\x38\x00\xB8\x80\x2A\xB0\x03\x94\x08\x03\x40\x0B\x38\x17\xC1\x02\xBC\x40\x25\xF8\x02\x2A\x80\x20\x20\x15\x4A\x00\x0D\x80\x17\xC0\x08\x96\x05\x6F\xE0\x30\x54', 500635, True),
    # Of course, it usually (p=1-2^-122) doesn't work the other way around:
    (b'\x00' * 32, b'World!!!', 13, 6, 122,
     b'\x02\xFF\x00\x0C\x90\x0F\xBC\x81\xD0\x10\x2F\x0A\x01\x87\x40\x13\x60\x00\x88\x01\x36\x40\x1A\x94\x0C\xB3\x80\x42\x90\x00\x82\x08\x53\x80\x0E\x68\x03\xE6\x03\xA6\x60\x27\x4C\x01\x39\x01\xDC\xF0\x1B\x7A\x00\x35\x40\x2D\xD8\x0B\xD5\x03\xC3\xA0\x17\x20\x03\x6C\x01\x8C\x70\x36\x5A\x00\x8F\x80\x58\x78\x0C\xE9\x02\x4A\x00\x8C\xB0\x11\x28\x80\x7C\x50\x32\xE0\x04\xFC\x80\x74\x58\x1C\x43\x00\x89\x40\x2E\xE8\x05\x9F\x00\x62\x00\x23\x9E\x01\xD5\x80\xDD\x38\x2E\x40\x04\xA8\x80\x19\x90\x06\x65\x00\x88\xB0\x51\xAA\x00\x67\xC0\xAF\x68\x01\x26\x03\xA6\x60\x0C\x90\x01\x64\x00\x36\x00\x00\xD0\x00\x45\xC1\x0D\xB8\x19\x7E\x00\x66\xE0\x4D\xC8\x0B\x13\x81\x2C\xA0\x3E\x20\x00\xF3\x00\x41\x40\x21\x44\x03\x09\xE0\x41\xE0\x02\x43\x81\x19\xA0\x0A\xFE\x01\xB4\xC0\x50\xE0\x11\x0D\x01\xC3\xA0\x01\xCC\x14\xCD\x01\xF2\xA0\x67\x40\x00\xA7\x40\x7E\x98\x02\xC0\x01\xF9\x20\x2F\x48\x08\xA7\x00\xCA\x70\x0C\xAA\x00\x5B\x01\xB1\x10\x06\x84\x03\x8E\xC0\x87\x0C\x1F\xF4\x81\x07\x10\x10\x02\x02\xBC\x80\x0C\x80\x16\x87\x08\xD7\x60\x40\x38\x00\xB8\x80\x2A\xB0\x03\x94\x08\x03\x40\x0B\x38\x17\xC1\x02\xBC\x40\x25\xF8\x02\x2A\x80\x20\x20\x15\x4A\x00\x0D\x80\x17\xC0\x08\x96\x05\x6F\xE0\x30\x54', 500635, False),
    # Of course it supports NUL bytes in the prefix:
    (b'\x00' * 32, b'foobarbz', 12, 7, 128,
     b'\x04\x3F\xC0\x14\x4C\x10\x65\x80\x2D\x40\x26\x72\x08\x36\x00\x6E\xD0\x23\x20\x02\x70\x20\x13\xE8\x0A\xEE\x80\x7D\x20\x13\x9E\x06\xAC\x81\x3A\x90\x20\x98\x00\x11\x60\x3A\x4C\x05\x34\x00\x2D\xC0\x18\x3C\x0F\x1A\x80\x1E\xD0\x0A\x6B\x00\x25\xC0\x1F\x84\x00\x6B\x80\x52\x20\x18\xDA\x0F\xB7\xC0\x4C\x18\x1B\x84\x00\x8D\x80\x10\xD0\x08\x3A\x00\xAD\xA0\x22\x24\x00\x28\x40\x63\x80\x09\x99\x03\x74\x60\x1D\x30\x05\x8E\x01\xDE\x40\x49\xE8\x01\x7A\x40\xC3\x28\x00\xE6\x00\x75\x61\x42\x80\x02\x34\x80\x92\xB0\x03\x38\x03\x2F\x80\x60\x38\x07\xDC\x01\xB9\xA0\x34\x48\x00\x29\x00\xE5\xE0\x06\xB0\x07\xC6\xC0\x74\xA8\x45\x8A\x01\x7F\xE0\x56\xEC\x1E\x95\x80\x5D\x90\x02\xE8\x02\x10\x00\x1B\xE0\x11\x67\x03\xB2\x00\x32\x40\x08\xB0\x00\x52\x00\x02\x78\x02\x19\x40\x77\x40\x1A\x80\x00\xCA\x00\x98\x44\x0E\x26\x80\xCB\xA0\x1E\x66\x0B\xD8\x00\x0B\x88\x15\x39\x00\xE7\xA0\x1C\x88\x05\x3F\x00\x94\xE0\x61\xCE\x0C\xBB\x80\x1F\x28\x01\x51\x00\x9E\x00\x35\xE8\x17\xE6\x01\x53\xB0\x02\x98\x01\x1F\x80\x0D\xB0\x01\xA2\x01\xD4\x21\x04\x18\x04\xB6\x80\xCF\x20\x0A\xBA\x03\xF5\x80\xB8\xE8\x0D\xBA\x00\x7A\x40\x98\x4C\x0D\x17\x00\x1C\x90\x02\x7A\x00\x7D\x00\xBA\x68\x1F\x4A\x03\x3D\xE0\x2D\x7C\x03\xC4\x00\x5F\xE0\x2B\xD0\x12\x9F\x01\xEE\x38\x06\xB8', 576047, True),
]

# Magic numbers
H_LAST_HASH_OFF = 0
H_LAST_HASH_LEN = 256 // 8
H_NONCE_OFF = H_LAST_HASH_OFF + H_LAST_HASH_LEN
H_NONCE_LEN = 8
H_TOKEN_OFF = H_NONCE_OFF + H_NONCE_LEN
H_TOKEN_LEN = 8
H_STEP_OFF = H_TOKEN_OFF + H_TOKEN_LEN
H_STEP_LEN = 4
HASHBYTES = H_STEP_OFF + H_STEP_LEN
assert HASHBYTES == H_LAST_HASH_LEN + H_STEP_LEN + H_TOKEN_LEN + H_NONCE_LEN



def analyze_params(init_hash, token, difficulty, safety, steps, hashes_actual):
    print('Initial hash: {}'.format(init_hash))
    print('Token: {}'.format(token))
    print('Difficulty: {}'.format(difficulty))
    print('Safety: {}'.format(safety))
    print('Steps: {}'.format(steps))
    assert len(init_hash) == H_LAST_HASH_LEN
    assert len(token) == H_TOKEN_LEN
    assert difficulty + safety <= 64
    print('--------------------')
    print('Bits per step: {}'.format(difficulty + safety))
    print('Probability of impossibility: < 2^({})'.format(log2(steps) - 2 ** safety))
    print('E[num hashes]: {}'.format(steps * (2 ** difficulty)))
    print('Actual num hashes: {}'.format(hashes_actual))
    print('Certificate byte length: {}'.format(ceil(steps * (difficulty + safety) / 8)))
    print('--------------------')


def check_difficulty(buf, difficulty):
    digest = sha256(buf).digest()
    return digest, all(digest[i // 8] & (1 << (7 - i % 8)) == 0 for i in range(difficulty))


def extract_nonce(cert, offset_bits):
    nonce = bytearray(H_NONCE_LEN)
    for bit in range(0, H_NONCE_LEN * 8):
        certbit = (cert[(offset_bits + bit) // 8] << ((offset_bits + bit) % 8)) & 0x80
        nonce[bit // 8] |= certbit >> (bit % 8)
    assert nonce != bytearray(H_NONCE_LEN), (cert, offset_bits)
    return nonce


def try_verify(init_hash, token, difficulty, safety, steps, certificate):
    if len(certificate) != ceil(steps * (difficulty + safety) / 8):
        print('Bad length.')
        return False
    # hashbuf = last_hash || nonce || token || step
    hashbuf = bytearray(H_LAST_HASH_LEN + H_NONCE_LEN)
    hashbuf.extend(token)
    hashbuf.extend(b'\xFF' * H_STEP_LEN)
    assert len(hashbuf) == HASHBYTES
    last_hash = init_hash
    step_struct = Struct('>I')
    for i in range(0, steps):
        nonce = extract_nonce(certificate, (difficulty + safety) * i)
        hashbuf[H_LAST_HASH_OFF:H_LAST_HASH_OFF + H_LAST_HASH_LEN] = last_hash
        assert len(hashbuf) == HASHBYTES
        hashbuf[H_NONCE_OFF:H_NONCE_OFF + H_NONCE_LEN] = nonce
        assert len(hashbuf) == HASHBYTES
        hashbuf[H_STEP_OFF:H_STEP_OFF + H_STEP_LEN] = step_struct.pack(i)
        assert len(hashbuf) == HASHBYTES
        last_hash, success = check_difficulty(hashbuf, difficulty)
        if not success:
            print('Failed at step {}, with buf {}'.format(i, hashbuf))
            return False
    return True


def run_on(init_hash, token, difficulty, safety, steps, certificate, hashes_actual, valid_expect):
    analyze_params(init_hash, token, difficulty, safety, steps, hashes_actual)
    valid_actual = try_verify(init_hash, token, difficulty, safety, steps, certificate)
    print('Valid: {}'.format(valid_actual))
    print('Matches expectation: {}'.format(valid_actual == valid_expect))
    if valid_actual != valid_expect:
        print('===================')
        print('== ERROR: Wrong! ==')
        print('===================')


def run_all(certificates):
    for i, args in enumerate(TEST_CERTS):
        print('========================================')
        print('Checking cert #{}'.format(i))
        run_on(*args)


if __name__ == '__main__':
    run_all(TEST_CERTS)
